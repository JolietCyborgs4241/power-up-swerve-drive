// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
#include "Autonomous/Auto.h"
using namespace frc;

DriveTrain* Robot::driveTrain = NULL;
OI* Robot::oi = NULL;
DrivePigeon* Robot::drivePigeon = NULL;
Elevator* Robot::elevator = NULL;
Pneumatics* Robot::pneumatics = NULL;
IntakeDetection* Robot::intakeDetection = NULL;
RampWinch* Robot::rampWinch = NULL;

void Robot::RobotInit() {
	RobotMap::init();

	driveTrain = new DriveTrain();
	drivePigeon = new DrivePigeon();
	oi = new OI();
	elevator = new Elevator();
	pneumatics = new Pneumatics();
	intakeDetection = new IntakeDetection();
	rampWinch = new RampWinch();


	chooser.AddDefault("Auto", new Auto());

	//CameraServer::GetInstance()->SetQuality(30);
	//CameraServer::GetInstance()->StartAutomaticCapture("cam0");
    // Create an image

	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	prevTrigger = false;

	driveTrain->SetWheelbase(24, 22, 24);
	FLOffset = 0;
	FROffset = 0;
	RLOffset = 0;
	RROffset = 0;

	//Read XXVolt from SmartDashboard with wheels aligned.  Subtract 2.5 from each value and put in function below.
	//FL, FR, RL, RR
	driveTrain->SetOffsets(FLOffset, FROffset, RLOffset, RROffset);

	driveTrain->frontLeft->Enable();
	driveTrain->frontRight->Enable();
	driveTrain->rearLeft->Enable();
	driveTrain->rearRight->Enable();

	//Read RawPrimaryCamPosition with cams in notch and but value in first argument below
	turnDirection = 0;
	driveForwardAngle = 0;
	x = 0;
	y = 0;
	twist = 0;

	//pneumatics->Start();
}

void Robot::DisabledInit() {

}

void Robot::DisabledPeriodic() {

}

void Robot::AutonomousInit() {
	autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// this line or comment it out.
	cycleTime = GetClock();
	incnum = 1;
}

void Robot::TeleopPeriodic() {
	SMDB();

	SmartDashboard::PutNumber("CycleTime", GetClock() - cycleTime);
	cycleTime = GetClock();

	driveTrain->Crab(-oi->getJoystickZ(),-oi->getJoystickX(),oi->getJoystickY(), true);
	//driveTrain->Lock();

	Scheduler::GetInstance()->Run();
}
void Robot::TestPeriodic() {
	lw->Run();
}
void Robot::SMDB() {
	//Joystick Variables
	SmartDashboard::PutNumber("RightStickY",oi->getDriverJoystickRight()->GetY());
	SmartDashboard::PutNumber("RightStickX",oi->getDriverJoystickRight()->GetX());
	SmartDashboard::PutNumber("RightStickZ", oi->getDriverJoystickRight()->GetZ());
	//Wheel Module Voltages
	SmartDashboard::PutNumber("FrontLeftVol",driveTrain->frontLeftPos->GetAverageVoltage());
	SmartDashboard::PutNumber("FrontRightVol",driveTrain->frontRightPos->GetAverageVoltage());
	SmartDashboard::PutNumber("RearLeftVol",driveTrain->rearLeftPos->GetAverageVoltage());
	SmartDashboard::PutNumber("RearRightVol",driveTrain->rearRightPos->GetAverageVoltage());
	//Wheel Module Errors
	SmartDashboard::PutNumber("FLError", driveTrain->frontLeft->GetError());
	SmartDashboard::PutNumber("FRError", driveTrain->frontRight->GetError());
	SmartDashboard::PutNumber("RLError", driveTrain->rearLeft->GetError());
	SmartDashboard::PutNumber("RRError", driveTrain->rearRight->GetError());
	//Wheel Module Setpoints
	SmartDashboard::PutNumber("FLSetPoint", driveTrain->frontLeft->GetSetpoint());
	SmartDashboard::PutNumber("FRSetPoint", driveTrain->frontRight->GetSetpoint());
	SmartDashboard::PutNumber("RLSetPoint", driveTrain->rearLeft->GetSetpoint());
	SmartDashboard::PutNumber("RRSetPoint", driveTrain->rearRight->GetSetpoint());

	SmartDashboard::PutNumber("DriveGyro", drivePigeon->GetYaw());
	SmartDashboard::PutNumber("IntakeDetection", intakeDetection->GetRangeInches());

}

START_ROBOT_CLASS(Robot);
//	SmartDashboard::PutNumber("AccelAngle", drivePigeon->GetAccelAngle());
